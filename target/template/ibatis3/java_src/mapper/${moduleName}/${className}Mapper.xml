<#include "/macro.include"/>
<#assign className = table.className>   
<#assign classNameFirstLower = table.classNameFirstLower>   
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<#macro mapperEl value>${r"#{"}${value}}</#macro>
<#macro mapperLike value>LIKE CONCAT('%',${r"#{"}${value}},'%')</#macro>
<#macro namespace>${className}.</#macro>

<mapper namespace="${className}">
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="<@namespace/>columns">
	    <![CDATA[
		<#list table.columns as column>
        		`${column.sqlName}` as '${column.columnNameFirstLower}'<#if column_has_next>,</#if>
        </#list>
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="${table.idColumn.columnNameFirstLower}">
    <![CDATA[
        INSERT INTO ${table.sqlName} (
        <#list table.columns as column>
        	`${column.sqlName}` <#if column_has_next>,</#if>
        </#list>
        ) VALUES (
        <#list table.columns as column>
        	<@mapperEl column.columnNameFirstLower/> <#if column_has_next>,</#if>
        </#list>        
        )
    ]]>
	</insert>

	<insert id="insertList" useGeneratedKeys="true" keyProperty="${table.idColumn.columnNameFirstLower}" parameterType="List">
		<selectKey resultType="${table.idColumn.javaType}" keyProperty="${table.idColumn.columnNameFirstLower}" order="AFTER">
            SELECT
            LAST_INSERT_ID()
        </selectKey>
		INSERT INTO ${table.sqlName} (
        <#list table.columns as column>
        	`${column.sqlName}` <#if column_has_next>,</#if>
        </#list>
        ) VALUES 
        <foreach collection="list" item="item" separator=",">
        	(
        		<#list table.columns as column>
        			<@mapperEl 'item.'+column.columnNameFirstLower/> <#if column_has_next>,</#if>
        		</#list>
        	)
        </foreach>
	</insert>
    
	<update id="update" >
        UPDATE ${table.sqlName} SET
	        <#list table.notPkColumns as column>
	        `${column.sqlName}` = <@mapperEl column.columnNameFirstLower/> <#if column_has_next>,</#if>
	        </#list>
         WHERE
        	<#list table.compositeIdColumns as column>
				`${column.sqlName}` = <@mapperEl column.columnNameLower/><#if column_has_next> AND </#if>
	        </#list>
	</update>

	<!-- 按需更新 -->
	<update id="updateIfNecessary">
	  UPDATE ${table.sqlName}
		<set>
		  <#list table.columns as column>
		  <#if !column.pk>
			<if test="${column.columnNameFirstLower} != null">
				`${column.sqlName}`=<@mapperEl column.columnNameFirstLower/>,
			</if>
		  </#if>
		</#list>	
		</set>
	  <where>	      				
	      <#list table.columns as column>
	       <#if column.pk>
				AND `${column.sqlName}` = <@mapperEl column.columnNameFirstLower/>
			</#if>
	       </#list>			
		</where>
	</update>

	<update id="updateList" parameterType="java.util.List">
        UPDATE ${table.sqlName} SET
		<#list table.notPkColumns as column>
			`${column.sqlName}` = 
			<foreach collection="list" item="item" index="index" open="case ${table.pkColumn}" separator=" " close="end">
				when <@mapperEl "item."+table.pkColumn.columnNameFirstLower/> then <@mapperEl "item."+column.columnNameFirstLower/>
			</foreach>
			<#if column_has_next>,</#if>
		</#list>
		WHERE `${table.pkColumn}` IN <foreach collection="list" item="item" index="index" open="(" separator="," close=")"><@mapperEl "item."+table.pkColumn.columnNameFirstLower/></foreach>
	</update>

    <delete id="delete">
        DELETE FROM ${table.sqlName} WHERE
        	<#list table.compositeIdColumns as column>
	        `${column.sqlName}` = <@mapperEl column.columnNameLower/><#if column_has_next> AND </#if>
	        </#list>
    </delete>

	<!--动态删除-->
	 <delete id="deleteBy">
        DELETE FROM ${table.sqlName} 	
		<include refid="<@namespace/>DynamicWhere"/>  
    </delete>
    
    <select id="getById" resultType="${basepackage}.${moduleName}.bean.${className}">
		SELECT <include refid="<@namespace/>columns" />
		    FROM ${table.sqlName} 
         WHERE
        	<#list table.compositeIdColumns as column>
	        `${column.sqlName}` = <@mapperEl column.columnNameLower/><#if column_has_next> AND </#if>
	        </#list>	  
	</select>

	<select id="getByIdList" resultType="${basepackage}.${moduleName}.bean.${className}">
		SELECT <include refid="<@namespace/>columns" /> 
		FROM ${table.sqlName} 
		WHERE
		<#list table.compositeIdColumns as column>
			`${column.sqlName}` IN <foreach collection="list" item="item" index="index" open="(" separator="," close=")"><@mapperEl "item"/></foreach><#if column_has_next> AND </#if>
		</#list>
	</select>

	<sql id="<@namespace/>DynamicWhere">
		<where>
	       <#list table.columns as column>
			   <if test="${column.columnNameFirstLower} != null">
					AND `${column.sqlName}` = <@mapperEl column.columnNameFirstLower/>
				</if>
	       </#list>			
		</where>
	</sql>
		
    <select id="count" resultType="int">
        SELECT count(*) FROM ${table.sqlName} 
		<include refid="<@namespace/>DynamicWhere"/>    
    </select>

    <select id="getList" resultType="${basepackage}.${moduleName}.bean.${className}">
    	SELECT <include refid="<@namespace/>columns" />
	    FROM ${table.sqlName} 
		<include refid="<@namespace/>DynamicWhere"/>
		
		<if test="sortColumns != null">
			ORDER BY <@jspEl 'sortColumns'/>
		</if>
    </select>

	<sql id="<@namespace/>RangeWhere">
		<where>
	       <#list table.columns as column>
				<#if column.javaType == "java.lang.Integer" || column.javaType == "java.lang.Long">
					<if test="${column.columnNameFirstLower}List != null">
						AND `${column.sqlName}` IN <foreach collection="${column.columnNameFirstLower}List" item="item" index="index" open="(" separator="," close=")"><@mapperEl "item"/></foreach>
					</if>
				<#elseif column.javaType == "java.lang.String">
					<if test="${column.columnNameFirstLower} != null">
						AND `${column.sqlName}` <@mapperLike column.columnNameFirstLower/>
					</if>
				<#elseif column.javaType == "java.util.Date">
					<if test="startOf${column.columnName} != null">
						AND `${column.sqlName}` &gt;= <@mapperEl column.columnNameFirstLower/>
					</if>
					<if test="endOf${column.columnName} != null">
						AND `${column.sqlName}` &lt; <@mapperEl column.columnNameFirstLower/>
					</if>
				</#if>
	       </#list>			
		</where>
	</sql>

	<select id="countByRange" resultType="int">
        SELECT COUNT(*) FROM ${table.sqlName} 
		<include refid="<@namespace/>RangeWhere"/>    
    </select>

	<select id="getByRange" resultType="${basepackage}.${moduleName}.bean.${className}">
		SELECT <include refid="<@namespace/>columns" /> 
		FROM ${table.sqlName} 
		<include refid="<@namespace/>RangeWhere"/>
		<if test="sortColumns != null">
			ORDER BY <@jspEl 'sortColumns'/>
		</if>
	</select>

    <#list table.columns as column>
		<#if column.unique && !column.pk>
			<select id="getBy${column.columnName}" resultType="${basepackage}.${moduleName}.bean.${className}" parameterType="${column.javaType}">
				SELECT <include refid="<@namespace/>columns"/>
				<![CDATA[
					FROM ${table.sqlName} where `${column.sqlName}` = <@mapperEl column.columnNameLower/>
				]]>
			</select>
		</#if>
	</#list>
</mapper>

